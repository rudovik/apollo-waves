# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddToCartInput {
  productId: ObjectId!
  quantity: Float!
}

"""Brand"""
type Brand {
  _id: ObjectId!
  name: String!
}

type CardBlockItem {
  _id: ObjectId!
  brand: Brand!
  image: String
  name: String!
  price: Float!
}

type CardBlockItemWithDescription {
  _id: ObjectId!
  brand: Brand!
  description: String!
  image: String
  name: String!
  price: Float!
}

type CartItem {
  _id: ObjectId!
  image: String
  name: String!
  price: Float!
  productId: ObjectId!
  quantity: Float!
  userId: ObjectId!
}

type GenericResponse {
  success: Boolean!
}

input GetProductsToShopFiltersInput {
  brand: [ObjectId!]
  frets: [Float!]
  price: PriceInput
  wood: [ObjectId!]
}

type ImageType {
  public_id: String!
  url: String!
}

type Mutation {
  addBrand(name: String!): GenericResponse!
  addToCart(input: AddToCartInput!): GenericResponse!
  addWood(name: String!): GenericResponse!
  captureOrder(orderId: String!): PayPalCaptureOrderResponse!
  createOrder: PayPalCreateOrderResponse!
  deleteBrand(name: String!): GenericResponse!
  deleteWood(name: String!): GenericResponse!
  removeFromCart(productId: ObjectId!): GenericResponse!
}

"""Mongo id scalar type"""
scalar ObjectId

type PayPalCaptureOrderResponse {
  id: String!
  status: String!
}

type PayPalCreateOrderResponse {
  id: String!
  links: [PayPalLinkItem!]!
  status: String!
}

type PayPalLinkItem {
  href: String!
  method: RequestMethod!
  rel: RequestRelation!
}

input PriceInput {
  gte: Float!
  lte: Float!
}

"""Product"""
type Product {
  _id: ObjectId!
  available: Boolean!
  brand: Brand!
  description: String!
  frets: Float!
  images: [ImageType]!
  name: String!
  price: Float!
  publish: Boolean!
  shipping: Boolean!
  sold: Float!
  wood: Wood!
}

type ProductShopResponse {
  products: [CardBlockItemWithDescription]!
  size: Float!
  total: Float!
}

type Query {
  getAllBrands: [Brand]!
  getAllWoods: [Wood]!
  getCardBlockItems(sortBy: SortBy!): [CardBlockItem!]
  getCartProducts: [CartItem]!
  getProductById(_id: ObjectId!): Product
  getProductsToShop(filters: GetProductsToShopFiltersInput, limit: Float, order: SortOrderScalar, skip: Float, sortBy: SortBy): ProductShopResponse!
}

"""Allowed request methods"""
enum RequestMethod {
  GET
  PATCH
  POST
}

"""Allowed request relations"""
enum RequestRelation {
  APPROVE
  CAPTURE
  SELF
  UPDATE
}

"""Allowable sort by values"""
enum SortBy {
  _id
  createdAt
  sold
}

"""Mongoose Sort Order Scalar"""
scalar SortOrderScalar

"""Wood"""
type Wood {
  _id: ObjectId!
  name: String!
}